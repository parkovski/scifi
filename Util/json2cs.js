const fs = require('fs');
const os = require('os');

const jsonPath = process.argv[2];
const csPath = process.argv[3];
const fullClassName = process.argv[4] || require('path').basename(csPath, '.cs');

if (!jsonPath || !csPath) {
    console.log(`usage: node json2cs.js <json file> <cs output> <optional class name>`);
    console.log('if no class name is given, the default is taken from the output filename.');
}

const json = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));

// Arrays must be convertible to Vec2 or Vec3.
function isValidArray(array) {
    if (array.length < 2 || array.length > 3) {
        return false;
    }
    return array.every(value => typeof value === 'number');
}

class CSWriter {
    constructor(className, ns) {
        this.indent = 0;
        this.cs = '';
        this.usingUnityEngine = false;
        this.closingBracesNeeded = 0;

        if (ns) {
            this.writeLine(`namespace ${ns} {`);
            this.indent += 4;
            ++this.closingBracesNeeded;
        }
        this.writeLine(`public class ${className} {`);
        this.indent += 4;
        ++this.closingBracesNeeded;
    }

    addConstant(name, value) {
        let type;
        if (typeof value === 'string') {
            type = 'string';
        } else if (typeof value === 'number') {
            if (Number.isSafeInteger(value)) {
                type = 'int';
            } else {
                type = 'float';
            }
        } else if (Array.isArray(value)) {
            if (!isValidArray(value)) {
                throw 'cannot convert array for key ' + name;
            }
            if (value.length === 2) {
                type = 'Vector2';
            } else if (value.length === 3) {
                type = 'Vector3';
            }
        } else {
            throw 'type not supported for key ' + name;
        }

        switch (type) {
        case 'string':
            this.writeLine(`const string ${name} = "${value}";`);
            break;
        case 'int':
            this.writeLine(`const int ${name} = ${value};`);
            break;
        case 'float':
            this.writeLine(`const float ${name} = ${value}f;`);
            break;
        case 'Vector2':
            this.ensureUsing();
            this.writeLine(`readonly Vector2 ${name} = new Vector2(${value[0]}f, ${value[1]}f);`);
            break;
        case 'Vector3':
            this.ensureUsing();
            this.writeLine(`readonly Vector3 ${name} = new Vector3(${value[0]}f, ${value[1]}f, ${value[2]}f);`);
            break;
        }
    }

    ensureUsing() {
        if (!this.usingUnityEngine) {
            this.usingUnityEngine = true;
            this.cs = 'using UnityEngine;' + os.EOL + os.EOL + this.cs;
        }
    }

    writeLine(text) {
        this.cs += ' '.repeat(this.indent);
        this.cs += text;
        this.cs += os.EOL;
    }

    finish() {
        while (this.closingBracesNeeded > 1) {
            if (this.indent >= 4) {
                this.indent -= 4;
            }
            this.writeLine('}');
            --this.closingBracesNeeded;
        }
        this.cs += '}';
        return '// Autogenerated by json2cs.js' + os.EOL + os.EOL + this.cs;
    }
}

const lastDot = fullClassName.lastIndexOf('.');
let namespace, className;
if (lastDot === -1) {
    className = fullClassName;
} else {
    namespace = fullClassName.substring(0, lastDot);
    className = fullClassName.substring(lastDot + 1);
}
const writer = new CSWriter(className, namespace);
Object.keys(json).forEach(key => {
    writer.addConstant(key, json[key]);
});
fs.writeFileSync(csPath, writer.finish(), 'utf8');